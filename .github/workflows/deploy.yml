# .github/workflows/deploy.yml

name: Deploy Spring Boot + React to EC2 (Blue-Green)

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    name: Build and Deploy (Blue-Green)
    runs-on: ubuntu-latest

    steps:
      - name: üöÄ Connect to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- 1. ÏÜåÏä§ÏΩîÎìú Ï§ÄÎπÑ ---
            # app Ìè¥ÎçîÍ∞Ä ÏóÜÏúºÎ©¥ deploy Î∏åÎûúÏπòÎ•º ÏßÅÏ†ë ÌÅ¥Î°†ÌïòÍ≥†, ÏûàÏúºÎ©¥ ÏµúÏã† ÏΩîÎìúÎ•º Î∞õÏïÑÏòµÎãàÎã§.
            if [ ! -d "~/app" ]; then
              echo "Cloning 'deploy' branch from repository..."
              git clone -b deploy https://github.com/malanjari/mapleLand-Server.git ~/app
            fi
            cd ~/app
            git checkout deploy
            git pull origin deploy

            # --- 1.5. ÏÑúÎ≤Ñ ÌôòÍ≤Ω ÏûêÎèô ÏÑ§Ï†ï (Java, Node.js ÏÑ§Ïπò) ---
            # Java 17 ÏÑ§Ïπò (ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå)
            if ! java -version 2>&1 | grep -q "openjdk 17"; then
              echo "Java 17 not found, installing..."
              sudo apt-get update -y
              sudo apt-get install -y openjdk-17-jdk
            else
              echo "Java 17 is already installed."
            fi

            # Node.js 20 ÏÑ§Ïπò (ÏóÜÍ±∞ÎÇò Î≤ÑÏ†ÑÏù¥ Îã§Î•∏ Í≤ΩÏö∞ÏóêÎßå)
            if ! command -v node &> /dev/null || ! node -v | grep -q "v20."; then
              echo "Node.js v20 not found or version is not 20, installing..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js v20 is already installed."
            fi

            # --- 2. ÏÑúÎ≤ÑÏóêÏÑú ÏßÅÏ†ë ÎπåÎìú ---
            echo "üõ†Ô∏è Building Spring Boot App on server..."
            chmod +x ./backend/gradlew
            ./backend/gradlew build -x test -p ./backend

            echo "üßæ Building React App on server..."
            # frontend ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥ÎèôÌïòÏó¨ npm install Î∞è build Ïã§Ìñâ
            cd ./frontend
            npm ci
            npm run build
            cd .. # Îã§Ïãú app Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î°ú Î≥µÍ∑Ä

            # --- 3. DockerÎ°ú Î∏îÎ£®/Í∑∏Î¶∞ Î∞∞Ìè¨ ---
            echo "üöÄ Starting Blue-Green Deployment..."

            # .env ÌååÏùº ÏÉùÏÑ±
            echo "DB_URL=${{ secrets.DB_URL }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}" >> .env
            echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}" >> .env
            echo "DISCORD_REDIRECT_URI=${{ secrets.DISCORD_REDIRECT_URI }}" >> .env

            # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Í∑∏Î£π ÌôïÏù∏
            IS_BLUE_RUNNING=$(docker ps --filter "name=blue-nginx-1" --format "{{.Names}}")
            if [ -n "$IS_BLUE_RUNNING" ]; then
              TARGET_GROUP=green
              OLD_GROUP=blue
            else
              TARGET_GROUP=blue
              OLD_GROUP=green
            fi
            echo "üöÄ Deploying to $TARGET_GROUP group, shutting down $OLD_GROUP group later."

            # ÏÉàÎ°úÏö¥ Í∑∏Î£π ÎπåÎìú Î∞è Ïã§Ìñâ
            docker compose -f docker-compose.yml -p $TARGET_GROUP up -d --build

            # Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÎåÄÍ∏∞
            echo "Waiting for $TARGET_GROUP to be healthy..."
            sleep 30

            # Î¶¨Î≤ÑÏä§ ÌîÑÎ°ùÏãú ÏÑ§Ï†ï Î≥ÄÍ≤Ω Î∞è Ïû¨ÏãúÏûë
            echo "Switching reverse-proxy to $TARGET_GROUP..."
            sed "s/##TARGET_GROUP##/$TARGET_GROUP/g" ./nginx-proxy/nginx.template.conf > ./nginx-proxy/nginx.conf
            docker restart reverse-proxy
            echo "‚úÖ Switched to $TARGET_GROUP successfully!"

            # Ïù¥Ï†Ñ Í∑∏Î£π Ï†ïÎ¶¨
            docker compose -f docker-compose.yml -p $OLD_GROUP down --volumes || true
            echo "üßπ Cleaned up $OLD_GROUP group."
