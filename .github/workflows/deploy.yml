# .github/workflows/deploy.yml

name: Deploy Spring Boot + React to EC2 (Blue-Green)

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    name: Build and Deploy (Blue-Green)
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v3

      # --- CI: Build Artifacts ---
      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission to gradlew
        run: chmod +x ./backend/gradlew

      - name: üõ†Ô∏è Build Spring Boot with Gradle
        run: ./gradlew build -x test
        working-directory: ./backend

      - name: üß± Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: üßæ Build React App
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      # --- Î∞∞Ìè¨ Ìè¥Îçî Íµ¨Ï°∞Ìôî ---
      - name: üìÅ Prepare deployment structure
        run: |
          mkdir -p ./deploy/backend/build/libs
          mkdir -p ./deploy/frontend
          mkdir -p ./deploy/nginx
          mkdir -p ./deploy/nginx-proxy

          cp ./backend/Dockerfile ./deploy/backend/
          cp ./backend/build/libs/*.jar ./deploy/backend/build/libs/
          cp -r ./frontend/dist ./deploy/frontend/
          cp -r ./nginx/* ./deploy/nginx/
          cp -r ./nginx-proxy/* ./deploy/nginx-proxy/
          cp ./docker-compose.yml ./deploy/

      # --- üí° Î≥ÄÍ≤ΩÏ†ê 1: Î∞∞Ìè¨ Ìè¥ÎçîÎ•º ÏßÅÏ†ë ÏïïÏ∂ï ---
      - name: üì¶ Compress deployment folder
        run: |
          cd ./deploy
          tar -czf ../deploy.tar.gz .
          cd ..
          ls -alh deploy.tar.gz

      # --- CD: Deploy to Server ---
      - name: üöö Transfer Build Artifacts to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # üí° Î≥ÄÍ≤ΩÏ†ê 2: Í∞úÎ≥Ñ ÌååÏùº ÎåÄÏã† ÏïïÏ∂ï ÌååÏùº ÌïòÎÇòÎßå Ï†ÑÏÜ°
          source: "deploy.tar.gz"
          target: "~/"

      - name: üöÄ Deploy to EC2 with SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # üí° Î≥ÄÍ≤ΩÏ†ê 3: ÏÑúÎ≤ÑÏóêÏÑú ÏïïÏ∂ï Ìï¥Ï†ú Î∞è Ï†ïÎ¶¨
            rm -rf ~/app
            mkdir -p ~/app
            tar -xzf ~/deploy.tar.gz -C ~/app
            rm ~/deploy.tar.gz
            
            # Ïù¥Ï†úÎ∂ÄÌÑ∞Îäî Í∏∞Ï°¥ Ïä§ÌÅ¨Î¶ΩÌä∏ÏôÄ ÎèôÏùºÌïòÍ≤å ~/app Ìè¥ÎçîÎ°ú Ïù¥ÎèôÌïòÏó¨ ÏûëÏóÖÏùÑ ÏàòÌñâÌï©ÎãàÎã§.
            cd ~/app

            # .env ÌååÏùº ÏÉùÏÑ±
            echo "DB_URL=${{ secrets.DB_URL }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}" >> .env
            echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}" >> .env
            echo "DISCORD_REDIRECT_URI=${{ secrets.DISCORD_REDIRECT_URI }}" >> .env

            # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Í∑∏Î£π ÌôïÏù∏
            IS_BLUE_RUNNING=$(docker ps --filter "name=blue-nginx-1" --format "{{.Names}}")
            if [ -n "$IS_BLUE_RUNNING" ]; then
              TARGET_GROUP=green
              OLD_GROUP=blue
            else
              TARGET_GROUP=blue
              OLD_GROUP=green
            fi
            echo "üöÄ Deploying to $TARGET_GROUP group, shutting down $OLD_GROUP group later."

            # ÏÉàÎ°úÏö¥ Í∑∏Î£π ÎπåÎìú Î∞è Ïã§Ìñâ
            docker compose -f docker-compose.yml -p $TARGET_GROUP up -d --build

            # Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÎåÄÍ∏∞
            echo "Waiting for $TARGET_GROUP to be healthy..."
            sleep 30

            # Î¶¨Î≤ÑÏä§ ÌîÑÎ°ùÏãú ÏÑ§Ï†ï Î≥ÄÍ≤Ω Î∞è Ïû¨ÏãúÏûë
            echo "Switching reverse-proxy to $TARGET_GROUP..."
            sed "s/##TARGET_GROUP##/$TARGET_GROUP/g" ./nginx-proxy/nginx.template.conf > ./nginx-proxy/nginx.conf
            docker restart reverse-proxy
            echo "‚úÖ Switched to $TARGET_GROUP successfully!"

            # Ïù¥Ï†Ñ Í∑∏Î£π Ï†ïÎ¶¨
            docker compose -f docker-compose.yml -p $OLD_GROUP down --volumes || true
            echo "üßπ Cleaned up $OLD_GROUP group."
