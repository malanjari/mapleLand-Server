# .github/workflows/deploy.yml

name: Build on GitHub and Deploy to EC2

on:
  push:
    branches:
      - deploy
  pull_request:
    branches:
      - deploy

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/maple-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/maple-frontend

jobs:
  # -------------------- 1. 병렬 빌드 및 이미지 푸시 --------------------
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📦 Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🖼️ Build and push Backend
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🖼️ Build and push Frontend
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # -------------------- 2. EC2에 배포 --------------------
  deploy:
    name: Deploy to EC2
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy' && github.event_name == 'push'
    environment: production
    steps:
      - name: ⬇️ Checkout source code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            docker-compose.db.yml

      - name: 🚀 Connect to EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 5m
          script: |
            set -e  # Exit on any error
            
            # 색상 출력을 위한 함수
            log_info() { echo -e "\033[36m[INFO]\033[0m $1"; }
            log_success() { echo -e "\033[32m[SUCCESS]\033[0m $1"; }
            log_error() { echo -e "\033[31m[ERROR]\033[0m $1"; }

            # --- 0. 데이터베이스 컨테이너 실행 보장 ---
            log_info "Checking database container status..."
            if [ ! "$(docker ps -q -f name=maple-db)" ]; then
              log_info "Database container not found. Starting a new one..."
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > ~/db.env
              docker compose -f ~/docker-compose.db.yml --env-file ~/db.env up -d
              rm ~/db.env
              
              # DB 컨테이너가 완전히 시작될 때까지 대기
              log_info "Waiting for database to be ready..."
              sleep 30
            fi

            # --- 1. 최신 소스코드 및 .env 파일 준비 ---
            log_info "Preparing source code and environment..."
            
            # 워킹 디렉토리 설정
            WORK_DIR="$HOME/app"
            
            # 기존 디렉토리가 있으면 정리
            if [ -d "$WORK_DIR" ]; then
              log_info "Cleaning existing app directory..."
              cd "$HOME"
              rm -rf "$WORK_DIR"
            fi
            
            # 최신 코드 클론
            log_info "Cloning latest source code..."
            git clone -b deploy https://github.com/malanjari/mapleLand-Server.git "$WORK_DIR"
            cd "$WORK_DIR"
            
            # 권한 확인
            log_info "Current directory: $(pwd)"
            log_info "Directory contents: $(ls -la)"

            # .env 파일 생성
            cat > .env << EOL
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}
            DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}
            DISCORD_REDIRECT_URI=${{ secrets.DISCORD_REDIRECT_URI }}
            FRONTEND_REDIRECT_URL=${{ secrets.FRONTEND_REDIRECT_URL }}
            DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
            EOL

            # --- 2. Docker Hub에서 최신 이미지 받아오기 ---
            log_info "Pulling latest Docker images..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            # 병렬로 이미지 풀링
            docker pull ${{ secrets.DOCKER_USERNAME }}/maple-backend:${{ github.sha }} &
            docker pull ${{ secrets.DOCKER_USERNAME }}/maple-frontend:${{ github.sha }} &
            wait
            
            # 태그 업데이트
            docker tag ${{ secrets.DOCKER_USERNAME }}/maple-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/maple-backend:latest
            docker tag ${{ secrets.DOCKER_USERNAME }}/maple-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/maple-frontend:latest

            # --- 3. Docker로 블루/그린 배포 ---
            
            log_info "Starting blue-green deployment..."
            IS_BLUE_RUNNING=$(docker ps --filter "name=blue-nginx-1" --format "{{.Names}}")
            if [ -n "$IS_BLUE_RUNNING" ]; then
              TARGET_GROUP=green
              OLD_GROUP=blue
            else
              TARGET_GROUP=blue
              OLD_GROUP=green
            fi
            log_info "🚀 Deploying to $TARGET_GROUP group, shutting down $OLD_GROUP group later."

            # 이전 그룹 중지
            docker compose -f docker-compose.yml -p $OLD_GROUP down || true

            # 새로운 그룹 실행
            docker compose -f docker-compose.yml -p $TARGET_GROUP up -d

            # 간단한 헬스체크 (5초 대기 후 1회 확인)
            sleep 5
            if curl -f http://localhost > /dev/null 2>&1; then
              log_success "✅ Health check passed - stopping old containers"
              docker compose -f ~/docker-compose.yml -p $OLD_GROUP down > /dev/null 2>&1 || true
            else
              log_info "Health check failed, but continuing deployment..."
            fi

            log_success "✅ Deployment to $TARGET_GROUP completed successfully!"

            # --- 4. 사용하지 않는 도커 이미지 정리 ---
            log_info "Cleaning up unused Docker images..."
            docker image prune -a -f --filter "until=24h"
            
            # 디스크 사용량 확인
            df -h

  # -------------------- 3. 배포 후 검증 --------------------
  verify:
    name: Quick Verification
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy' && github.event_name == 'push'
    steps:
      - name: 🔍 Quick Health Check
        run: |
          # 기본 접근성 확인
          curl -f https://malanjari.com/ --max-time 10 || exit 1
          echo "✅ Site is accessible!"

      - name: 📢 Success Notification
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: "success"
          title: "🚀 Fast Deploy Success"
          description: |
            **✅ Deployment completed successfully!**
            **Commit:** `${{ github.sha }}`
            **Author:** ${{ github.actor }}
            **Time:** ${{ job.started_at }}
          color: 0x00ff00
          username: "GitHub Actions"
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"

  # -------------------- 4. 실패 알림 --------------------
  notify-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-backend, build-frontend, deploy]
    steps:
      - name: 🚨 Send Failure Alert
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: "failure"
          title: "❌ Fast Deploy Failed"
          description: |
            **❌ Pipeline failed**
            **Commit:** `${{ github.sha }}`
            **Author:** ${{ github.actor }}
            **Logs:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0xff0000
          username: "GitHub Actions"
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"