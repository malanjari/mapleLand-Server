# .github/workflows/deploy.yml

name: Deploy Spring Boot + React to EC2 (Blue-Green with ALB)

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    name: Build and Deploy (Blue-Green with ALB)
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Connect to EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- 0. 데이터베이스 컨테이너 실행 보장 ---
            if [ ! "$(docker ps -q -f name=maple-db)" ]; then
              echo "Database container not found. Starting a new one..."
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > ~/db.env
              docker compose -f ~/docker-compose.db.yml --env-file ~/db.env up -d
              rm ~/db.env
            else
              echo "Database container is already running."
            fi

            # --- 1. 소스코드 준비 ---
            if [ ! -d "~/app" ]; then
              git clone -b deploy https://github.com/malanjari/mapleLand-Server.git ~/app
            fi
            cd ~/app
            git pull origin deploy

            # --- 1.5. 서버 환경 자동 설정 ---
            if ! java -version 2>&1 | grep -q "openjdk 17"; then
              sudo apt-get update -y && sudo apt-get install -y openjdk-17-jdk
            fi
            if ! command -v node &> /dev/null || ! node -v | grep -q "v20."; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # --- 2. 서버에서 직접 빌드 ---
            chmod +x ./backend/gradlew
            ./backend/gradlew build -x test -p ./backend
            cd ./frontend && npm ci && npm run build && cd ..

            # --- 3. Docker로 블루/그린 배포 ---
            echo "🚀 Starting Blue-Green Deployment..."

            # .env 파일 생성
            echo "DB_URL=${{ secrets.DB_URL }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}" >> .env
            echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}" >> .env
            echo "DISCORD_REDIRECT_URI=${{ secrets.DISCORD_REDIRECT_URI }}" >> .env
            echo "FRONTEND_REDIRECT_URL=${{ secrets.FRONTEND_REDIRECT_URL }}" >> .env
            echo "DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}" >> .env

            # 현재 실행 중인 그룹 확인
            IS_BLUE_RUNNING=$(docker ps --filter "name=blue-nginx-1" --format "{{.Names}}")
            if [ -n "$IS_BLUE_RUNNING" ]; then
              TARGET_GROUP=green
              OLD_GROUP=blue
            else
              TARGET_GROUP=blue
              OLD_GROUP=green
            fi
            echo "🚀 Deploying to $TARGET_GROUP group, shutting down $OLD_GROUP group later."

            # 이전 그룹을 먼저 중지하여 포트 충돌 방지
            echo "Stopping $OLD_GROUP group to free up port 80..."
            docker compose -f docker-compose.yml -p $OLD_GROUP down || true

            # 새로운 그룹 빌드 및 실행
            echo "Starting $TARGET_GROUP group..."
            docker compose -f docker-compose.yml -p $TARGET_GROUP up -d --build

            echo "✅ Deployment to $TARGET_GROUP completed!"

            # --- 4. 사용하지 않는 도커 이미지 정리 ---
            echo "🧹 Cleaning up unused docker images..."
            docker image prune -a -f
